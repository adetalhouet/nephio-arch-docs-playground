@startuml
!include  https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml
!include  https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml

Person_Ext(admin, "Network administrator", "Administrator of networks, cloud infrastructure or both")
System_Ext(core_service_orchestrator, "Core Service Orchestrator", "Core Domain service orchestrator")
System_Ext(oran_service_orchestrator, "O-RAN Service Orchestrator", "RAN domain service orchestrator")
System_Ext(cicd_system, "GitOps / CI / CD Systems", "Continuous integration / continuous delivery platforms verifying workloads and packages before onboarding to Nephio, or using Nephio as part of their operations")

System_Boundary(nephio, "Nephio") {
    System(porch, "Porch", "Package Orchestration Server is a k8s extension apiserver which manages the lifecycle of KRM configuration packages")
    System(nephio_core, "Nephio Core", "Set of controllers responsible for handling different aspects of workload and cluster specialisation and actuation")
    System(k8s_api, "Kubernetes API Server", "a component of the Kubernetes control plane that exposes the Kubernetes API. The API server is the front end for the Kubernetes control plane")
    System(configsync, "ConfigSync", "GitOps service which lets administrators deploy configurations from a source of truth, with the flexibility to support one or many clusters in a hybrid or multi-cloud environment")
    ContainerDb(gitrepomgr, "Git Repository Manager", "git", "System for hosting git repositories and supporting remote branch management and merging")
}

System_Ext(supported_nfs, "Supported network functions", "Network functions supported by Nephio (currently free5gc and OAI, with other vendors implementing support independently)")

System_Ext(clouds, "Cloud Providers", "Providers of Kubernetes clusters, such as GCP / Openshift and local kind clusters")

' Actor - nephio relationships
Rel_D(admin, k8s_api, "Manage NFs, workloads and clusters")
Rel_D(core_service_orchestrator, k8s_api, "Manage NFs, workloads and clusters")
Rel_D(oran_service_orchestrator, k8s_api, "Manage NFs, workloads and clusters")

Rel_R(cicd_system, k8s_api, "Onboard packages and other artefacts, trigger management use cases")

' Porch relations
Rel_U(porch, k8s_api, "Manage Packages / Package Variants")
Rel_R(porch, gitrepomgr, "Manage Packages / Package Variants")

' ConfigSync relations
Rel_L(configsync, gitrepomgr, "Manage K8S resources")
Rel_U(configsync, k8s_api, "Manage K8S resources")
Rel_D(configsync, clouds, "Manage K8S resources")

' Nephio core relations
Rel_U(nephio_core, k8s_api, "Manage K8S resources")
Rel_D(nephio_core, clouds, "Create, configure and manage clusters")
Rel_D(nephio_core, clouds, "Create, configure and manage network function workloads")
Rel_D(nephio_core, supported_nfs, "Manage Network Functions during runtime")

' Workload relations
Rel_D(supported_nfs, clouds, "Execute on cloud infrastructure")

@enduml